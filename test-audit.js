const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testAuditSystem() {
  console.log('üß™ Testing Audit System...\n');

  try {
    // 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è audit logs
    console.log('1. Testing GET /audit');
    const logsResponse = await axios.get(`${BASE_URL}/audit?limit=5`);
    console.log('‚úÖ Audit logs retrieved:', logsResponse.data.logs?.length || 0, 'logs');
    console.log('   Total logs:', logsResponse.data.total);
    console.log('');

    // 2. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('2. Testing GET /audit/stats');
    const statsResponse = await axios.get(`${BASE_URL}/audit/stats`);
    console.log('‚úÖ Audit stats retrieved:', statsResponse.data);
    console.log('');

    // 3. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
    console.log('3. Testing GET /audit with action filter');
    const filteredResponse = await axios.get(`${BASE_URL}/audit?action=READ&limit=3`);
    console.log('‚úÖ Filtered logs retrieved:', filteredResponse.data.logs?.length || 0, 'logs');
    console.log('');

    // 4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å auth)
    console.log('4. Testing patient creation (if authenticated)');
    try {
      const patientData = {
        name: 'Test Patient',
        email: 'test@example.com',
        phone: '+1234567890'
      };
      
      const patientResponse = await axios.post(`${BASE_URL}/patients`, patientData, {
        headers: {
          'Authorization': 'Bearer YOUR_JWT_TOKEN_HERE', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
          'X-Tenant-ID': 'test-tenant-id'
        }
      });
      console.log('‚úÖ Patient created:', patientResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è  Patient creation failed (expected if not authenticated):', error.response?.status);
    }
    console.log('');

    // 5. –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    console.log('5. Testing cleanup (dry run)');
    try {
      const cleanupResponse = await axios.post(`${BASE_URL}/audit/cleanup?daysToKeep=365`);
      console.log('‚úÖ Cleanup completed:', cleanupResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è  Cleanup failed:', error.response?.status);
    }
    console.log('');

    console.log('üéâ Audit system test completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testAuditSystem(); 