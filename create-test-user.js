const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true },
  password: { type: String, required: true },
  tenantId: { type: String, required: true }
});

const User = mongoose.model('User', userSchema);

async function createTestUser() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    await mongoose.connect('mongodb://localhost:27017/defaultdb');
    console.log('‚úÖ Connected to MongoDB');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await User.findOne({ email: 'test@example.com' });
    if (existingUser) {
      console.log('‚ö†Ô∏è  Test user already exists');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hashedPassword = await bcrypt.hash('password123', 10);
    const testUser = new User({
      name: 'Test User',
      email: 'test@example.com',
      password: hashedPassword,
      tenantId: 'test-tenant-123'
    });

    await testUser.save();
    console.log('‚úÖ Test user created successfully');
    console.log('   Email: test@example.com');
    console.log('   Password: password123');
    console.log('   Tenant ID: test-tenant-123');

  } catch (error) {
    console.error('‚ùå Error creating test user:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB');
  }
}

createTestUser(); 